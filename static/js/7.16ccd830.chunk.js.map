{"version":3,"sources":["components/InputClearButton.jsx","components/Input.jsx"],"names":["InputCleaner","styled","button","InputCleanerIcon","svg","InputClearButton","props","isClearButtonVisible","clearInput","onClick","width","height","version","viewBox","d","InputArea","input","InputWrapper","form","Input","inputContent","onInputContentChange","onInputClear","allUsers","focusable","useRef","inputDisabled","length","useEffect","current","focus","type","value","onChange","ref","autoCapitalize","disabled","autoFocus","placeholder","connect","state","users"],"mappings":"2JAIMA,EAAeC,IAAOC,OAAV,sIAOZC,EAAmBF,IAAOG,IAAV,4LAqBPC,EAXU,SAAAC,GACvB,IAAQC,EAAqCD,EAArCC,qBAAsBC,EAAeF,EAAfE,WAC9B,OAAOD,EACL,cAACP,EAAD,CAAcS,QAASD,EAAvB,SACE,cAACL,EAAD,CAAkBO,MAAM,KAAKC,OAAO,KAAKC,QAAQ,MAAMC,QAAQ,YAAY,cAAY,QAAvF,SACE,sBAAMC,EAAE,oIAGV,MCvBAC,EAAYd,IAAOe,MAAV,4JASTC,EAAehB,IAAOiB,KAAV,mgBAsBdC,EAAQ,SAAAb,GACV,IAAQc,EAA+Dd,EAA/Dc,aAAcC,EAAiDf,EAAjDe,qBAAsBC,EAA2BhB,EAA3BgB,aAAcC,EAAajB,EAAbiB,SACpDC,EAAYC,iBAAO,MACnBC,IAAkBH,GAAYA,EAASI,QAI7C,OAHAC,qBAAU,WACJJ,GAAWA,EAAUK,QAAQC,UAChC,CAACN,IAEF,eAACP,EAAD,WACE,cAACF,EAAD,CAAWgB,KAAK,OAAOC,MAAOZ,EAAca,SAAUZ,EAAsBa,IAAKV,EAAWW,eAAe,OAAOC,SAAUV,EAAeW,WAAS,EAACC,YAAY,2BACjK,cAAC,EAAD,CAAkB/B,uBAAwBa,EAAaO,OAAQnB,WAAYc,QASjFH,EAAQoB,aAJgB,SAAAC,GAAK,MAAK,CAChCjB,SAAUiB,EAAMC,MAAMlB,YAGS,KAAzBgB,CAA+BpB,GACxBA","file":"static/js/7.16ccd830.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InputCleaner = styled.button`\r\n  border: none;\r\n  padding: 0;\r\n  background-color: initial;\r\n  text-align: inherit;\r\n  cursor: pointer;\r\n`;\r\nconst InputCleanerIcon = styled.svg`\r\n  padding-right: 14px;\r\n  padding-left: 14px;\r\n  width: 20px;\r\n  height: 20px;\r\n  box-sizing: initial;\r\n  fill: #767676;\r\n  transition: fill 0.1s ease-in-out;\r\n`;\r\n\r\nconst InputClearButton = props => {\r\n  const { isClearButtonVisible, clearInput } = props;\r\n  return isClearButtonVisible ? (\r\n    <InputCleaner onClick={clearInput}>\r\n      <InputCleanerIcon width=\"32\" height=\"32\" version=\"1.1\" viewBox=\"0 0 32 32\" aria-hidden=\"false\">\r\n        <path d=\"M25.33 8.55l-1.88-1.88-7.45 7.45-7.45-7.45-1.88 1.88 7.45 7.45-7.45 7.45 1.88 1.88 7.45-7.45 7.45 7.45 1.88-1.88-7.45-7.45z\"></path>\r\n      </InputCleanerIcon>\r\n    </InputCleaner>\r\n  ) : null;\r\n};\r\n\r\nexport default InputClearButton;\r\n\r\nInputClearButton.propTypes = {\r\n  isClearButtonVisible: PropTypes.bool,\r\n  clearInput: PropTypes.func,\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputClearButton from \"./InputClearButton\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InputArea = styled.input`\r\n  padding-left: 14px;\r\n  flex-grow: 1;\r\n  width: 100%;\r\n  background: none;\r\n  border: none;\r\n  color: #111;\r\n  outline: none;\r\n`;\r\nconst InputWrapper = styled.form`\r\n  height: 54px;\r\n  display: flex;\r\n  position: relative;\r\n  transition: all 0.1s ease-in-out;\r\n  color: #fff;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n  line-height: 1.6;\r\n  border-radius: 4px;\r\n  background-color: #f5f5f5;\r\n  margin: 50px 0;\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 0 5px rgba(0, 0, 0, 0.1);\r\n  }\r\n  @media only screen and (max-width: 667px) {\r\n    margin-top: calc(10px + 40 * ((100vw - 320px) / 347));\r\n    margin-bottom: calc(10px + 40 * ((100vw - 320px) / 347));\r\n  }\r\n`;\r\n\r\nlet Input = props => {\r\n  const { inputContent, onInputContentChange, onInputClear, allUsers } = props;\r\n  const focusable = useRef(null);\r\n  const inputDisabled = !(allUsers && allUsers.length);\r\n  useEffect(() => {\r\n    if (focusable) focusable.current.focus();\r\n  }, [focusable]);\r\n  return (\r\n    <InputWrapper>\r\n      <InputArea type=\"text\" value={inputContent} onChange={onInputContentChange} ref={focusable} autoCapitalize=\"none\" disabled={inputDisabled} autoFocus placeholder=\"Search by user name...\" />\r\n      <InputClearButton isClearButtonVisible={!!inputContent.length} clearInput={onInputClear} />\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  allUsers: state.users.allUsers,\r\n});\r\n\r\nInput = connect(mapStateToProps, null)(Input);\r\nexport default Input;\r\n\r\nInput.propTypes = {\r\n  inputContent: PropTypes.string,\r\n  onInputContentChange: PropTypes.func,\r\n  onInputClear: PropTypes.func,\r\n  allUsers: PropTypes.array,\r\n};\r\n"],"sourceRoot":""}